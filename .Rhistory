# data = data[,-7]
# data = data[,-7]
# data = data[,-9]
# data = data[,-9]
#
# write.csv(data,"new.csv")
# Order by star
# Change "k" into normal number form
for(i in c(1:1500))
{
for(j in c(5:9))
{
len = nchar(data[i,j])
label = substring(data[i,j], len, len)
rest = substring(data[i,j], 1, len-1)
if(identical(label, "k"))
{
data[i,j] = as.numeric(rest) * 1000
}
else if(len > 3)
{
data[i,j] = paste( substring(data[i,j], 1, len-4), substring(data[i,j], len-2,len), sep="")
}
}
}
data$star = as.numeric(data$star)
data$fork = as.numeric(data$fork)
data$watch = as.numeric(data$watch)
data$commits = as.numeric(data$commits)
data$branches = as.numeric(data$branches)
typeof(data$star)
summary(data)
data = data[,-1]
data = data[order(data$star, decreasing= T),]
set.seed(7777777)# for repeatabality of the test sample we get
train_id = sample(nrow(data), size = 0.79*nrow(data))
train_set <- data[train_id,]
test_set <- data[-train_id,]
print(paste(nrow(train_set), "train +", nrow(test_set), "test"))
library(e1071)
model_svm = svm(star ~ fork+watch+commits+branches, data, cost = 1000, gamma = 0.0001)
summary(model_svm)
train_predict_svm = predict(model_svm, train_set)
test_predict_svm = predict(model_svm, test_set)
sqrt(mean((train_set$star - train_predict_svm)^2))
sqrt(mean((test_set$star - test_predict_svm)^2))
confusionMatrix(model_svm, positive = "1")
table(train_set, train_predict_svm)
table(train_set+test_set, train_predict_svm)
table(train_set, train_predict_svm)
confusionMatrix(train_predict_svm, positive = "1")
table(train_set$star, train_predict_svm)
ggplot(data, aes(y=star)) + geom_bar(stat="identity")
ggplot(data, aes(x=name,y=star)) + geom_bar(stat="identity")
ggplot(data, aes(y=star,x=name)) + geom_bar(stat="identity")
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(scales)
library(RColorBrewer)
library(gridExtra)
library(ggthemes)
library(GGally)
library(corrplot)
library(ROCR)
library(caret)
data = read.csv("new.csv")
# data = data[,-1]
# data = data[,-1]
# data = data[,-7]
# data = data[,-7]
# data = data[,-7]
# data = data[,-7]
# data = data[,-11]
# data = data[,-11]
# data = data[,-11]
# data = data[,-7]
# data = data[,-7]
# data = data[,-9]
# data = data[,-9]
#
# write.csv(data,"new.csv")
# Order by star
# Change "k" into normal number form
for(i in c(1:1500))
{
for(j in c(5:9))
{
len = nchar(data[i,j])
label = substring(data[i,j], len, len)
rest = substring(data[i,j], 1, len-1)
if(identical(label, "k"))
{
data[i,j] = as.numeric(rest) * 1000
}
else if(len > 3)
{
data[i,j] = paste( substring(data[i,j], 1, len-4), substring(data[i,j], len-2,len), sep="")
}
}
}
data$star = as.numeric(data$star)
data$fork = as.numeric(data$fork)
data$watch = as.numeric(data$watch)
data$commits = as.numeric(data$commits)
data$branches = as.numeric(data$branches)
typeof(data$star)
summary(data)
data = data[,-1]
#data = data[order(data$star, decreasing= T),]
set.seed(7777777)# for repeatabality of the test sample we get
train_id = sample(nrow(data), size = 0.79*nrow(data))
train_set <- data[train_id,]
test_set <- data[-train_id,]
print(paste(nrow(train_set), "train +", nrow(test_set), "test"))
??valueBox
?flexdashboard
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(scales)
library(RColorBrewer)
library(gridExtra)
library(ggthemes)
library(GGally)
library(corrplot)
library(ROCR)
library(caret)
data = read.csv("new.csv")
# data = data[,-1]
# data = data[,-1]
# data = data[,-7]
# data = data[,-7]
# data = data[,-7]
# data = data[,-7]
# data = data[,-11]
# data = data[,-11]
# data = data[,-11]
# data = data[,-7]
# data = data[,-7]
# data = data[,-9]
# data = data[,-9]
#
# write.csv(data,"new.csv")
# Order by star
# Change "k" into normal number form
for(i in c(1:1500))
{
for(j in c(5:9))
{
len = nchar(data[i,j])
label = substring(data[i,j], len, len)
rest = substring(data[i,j], 1, len-1)
if(identical(label, "k"))
{
data[i,j] = as.numeric(rest) * 1000
}
else if(len > 3)
{
data[i,j] = paste( substring(data[i,j], 1, len-4), substring(data[i,j], len-2,len), sep="")
}
}
}
data$star = as.numeric(data$star)
data$fork = as.numeric(data$fork)
data$watch = as.numeric(data$watch)
data$commits = as.numeric(data$commits)
data$branches = as.numeric(data$branches)
typeof(data$star)
summary(data)
data = data[,-1]
data = data[order(data$star, decreasing= T),]
renderPlot
valueBox(0, icon = "fa-star", color = "primary")
# renderValueBox({
#   valueBox(
#     value = rate,
#     icon = "fa-area-chart",
#     color = if (rate >= input$rateThreshold) "warning" else "primary"
#   )
})
valueBox(0, icon = "fa-star", color = "primary")
# renderValueBox({
#   valueBox(
#     value = rate,
#     icon = "fa-area-chart",
#     color = if (rate >= input$rateThreshold) "warning" else "primary"
#   )
# })
DT::datatable(data, options = list(pageLength = 25))
et.seed(input$seed)
set.seed(input$seed)
anova(model_lm)
set.seed(input$seed)
library(randomForest)
model_rf = randomForest(star ~ fork+watch+commits+branches, data)
plot(model_rf)
summary(model_rf)
train_predict_rf = predict(model_rf, train_set)
test_predict_rf = predict(model_rf, test_set)
sqrt(mean((train_set$star - train_predict_rf)^2))
sqrt(mean((test_set$star - test_predict_rf)^2))
library(randomForest)
model_rf = randomForest(star ~ fork+watch+commits+branches, data)
plot(model_rf)
#summary(model_rf)
train_predict_rf = predict(model_rf, train_set)
test_predict_rf = predict(model_rf, test_set)
sqrt(mean((train_set$star - train_predict_rf)^2))
sqrt(mean((test_set$star - test_predict_rf)^2))
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(scales)
library(visreg)
library(RColorBrewer)
library(gridExtra)
library(ggthemes)
library(GGally)
library(corrplot)
library(ROCR)
library(caret)
data = read.csv("new.csv")
# data = data[,-1]
# data = data[,-1]
# data = data[,-7]
# data = data[,-7]
# data = data[,-7]
# data = data[,-7]
# data = data[,-11]
# data = data[,-11]
# data = data[,-11]
# data = data[,-7]
# data = data[,-7]
# data = data[,-9]
# data = data[,-9]
#
# write.csv(data,"new.csv")
# Order by star
# Change "k" into normal number form
for(i in c(1:1500))
{
for(j in c(5:9))
{
len = nchar(data[i,j])
label = substring(data[i,j], len, len)
rest = substring(data[i,j], 1, len-1)
if(identical(label, "k"))
{
data[i,j] = as.numeric(rest) * 1000
}
else if(len > 3)
{
data[i,j] = paste( substring(data[i,j], 1, len-4), substring(data[i,j], len-2,len), sep="")
}
}
}
data$star = as.numeric(data$star)
data$fork = as.numeric(data$fork)
data$watch = as.numeric(data$watch)
data$commits = as.numeric(data$commits)
data$branches = as.numeric(data$branches)
typeof(data$star)
summary(data)
data = data[,-1]
data = data[order(data$star, decreasing= T),]
library(e1071)
model_svm = svm(star ~ fork+watch+commits+branches, data, cost = 1000, gamma = 0.0001)
# summary(model_svm)
train_predict_svm = predict(model_svm, train_set)
test_predict_svm = predict(model_svm, test_set)
par(mfrow = c(2, 2))  ##四个变量一起看
visreg(model_svm)
visreg(model_svm, "star", gg = TRUE, ylab = "watch")#单个变量
sqrt(mean((train_set$star - train_predict_svm)^2))
sqrt(mean((test_set$star - test_predict_svm)^2))
library(randomForest)
model_rf = randomForest(star ~ fork+watch+commits+branches, data)
plot(model_rf)
#summary(model_rf)
par(mfrow = c(2, 2))  ##四个变量一起看
visreg(model_rf)
train_predict_rf = predict(model_rf, train_set)
test_predict_rf = predict(model_rf, test_set)
sqrt(mean((train_set$star - train_predict_rf)^2))
sqrt(mean((test_set$star - test_predict_rf)^2))
library(e1071)
model_svm = svm(star ~ fork+watch+commits+branches, data, cost = 1000, gamma = 0.0001)
# summary(model_svm)
train_predict_svm = predict(model_svm, train_set)
test_predict_svm = predict(model_svm, test_set)
par(mfrow = c(2, 2))  ##四个变量一起看
visreg(model_svm)
visreg(model_svm, "star", gg = TRUE, ylab = "watch")#单个变量
sqrt(mean((train_set$star - train_predict_svm)^2))
sqrt(mean((test_set$star - test_predict_svm)^2))
renderPlot({
set.seed(input$seed)
train_id = sample(nrow(data), size = (input$size/1500)*nrow(data))
train_set = data[train_id,]
test_set = data[-train_id,]
#print(paste(nrow(train_set), "train +", nrow(test_set), "test"))
model_lm = lm(star ~ fork+watch+commits+branches, train_set)
plot(model_lm)
#summary(model_lm)
train_predict_lm = predict(model_lm, train_set)
test_predict_lm = predict(model_lm, test_set)
sqrt(mean((train_set$star - train_predict_lm)^2))
sqrt(mean((test_set$star - test_predict_lm)^2))
})
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(scales)
library(visreg)
library(RColorBrewer)
library(gridExtra)
library(ggthemes)
library(GGally)
library(corrplot)
library(ROCR)
library(caret)
data = read.csv("new.csv")
# data = data[,-1]
# data = data[,-1]
# data = data[,-7]
# data = data[,-7]
# data = data[,-7]
# data = data[,-7]
# data = data[,-11]
# data = data[,-11]
# data = data[,-11]
# data = data[,-7]
# data = data[,-7]
# data = data[,-9]
# data = data[,-9]
#
# write.csv(data,"new.csv")
# Order by star
# Change "k" into normal number form
for(i in c(1:1500))
{
for(j in c(5:9))
{
len = nchar(data[i,j])
label = substring(data[i,j], len, len)
rest = substring(data[i,j], 1, len-1)
if(identical(label, "k"))
{
data[i,j] = as.numeric(rest) * 1000
}
else if(len > 3)
{
data[i,j] = paste( substring(data[i,j], 1, len-4), substring(data[i,j], len-2,len), sep="")
}
}
}
data$star = as.numeric(data$star)
data$fork = as.numeric(data$fork)
data$watch = as.numeric(data$watch)
data$commits = as.numeric(data$commits)
data$branches = as.numeric(data$branches)
typeof(data$star)
summary(data)
data = data[,-1]
data = data[order(data$star, decreasing= T),]
renderPlot({
set.seed(input$seed)
train_id = sample(nrow(data), size = (input$size/1500)*nrow(data))
train_set <- data[train_id,]
test_set <- data[-train_id,]
#print(paste(nrow(train_set), "train +", nrow(test_set), "test"))
model_lm = lm(star ~ fork+watch+commits+branches, train_set)
plot(model_lm)
#summary(model_lm)
train_predict_lm = predict(model_lm, train_set)
test_predict_lm = predict(model_lm, test_set)
sqrt(mean((train_set$star - train_predict_lm)^2))
sqrt(mean((test_set$star - test_predict_lm)^2))
})
set.seed(input$seed)
?renderValueBox()
library(randomForest)
set.seed(input$seed)
library(flexdashboard)
library(ggplot2)
library(dplyr)
library(e1071)
library(scales)
library(visreg)
library(randomForest)
library(RColorBrewer)
library(gridExtra)
library(ggthemes)
library(GGally)
library(corrplot)
library(ROCR)
library(caret)
data = read.csv("new.csv")
# data = data[,-1]
# data = data[,-1]
# data = data[,-7]
# data = data[,-7]
# data = data[,-7]
# data = data[,-7]
# data = data[,-11]
# data = data[,-11]
# data = data[,-11]
# data = data[,-7]
# data = data[,-7]
# data = data[,-9]
# data = data[,-9]
#
# write.csv(data,"new.csv")
# Order by star
# Change "k" into normal number form
for(i in c(1:1500))
{
for(j in c(5:9))
{
len = nchar(data[i,j])
label = substring(data[i,j], len, len)
rest = substring(data[i,j], 1, len-1)
if(identical(label, "k"))
{
data[i,j] = as.numeric(rest) * 1000
}
else if(len > 3)
{
data[i,j] = paste( substring(data[i,j], 1, len-4), substring(data[i,j], len-2,len), sep="")
}
}
}
data$star = as.numeric(data$star)
data$fork = as.numeric(data$fork)
data$watch = as.numeric(data$watch)
data$commits = as.numeric(data$commits)
data$branches = as.numeric(data$branches)
typeof(data$star)
summary(data)
data = data[,-1]
data = data[order(data$star, decreasing= T),]
renderPlot({
set.seed(input$seed2)
train_id = sample(nrow(data), size = (input$size2/1500)*nrow(data))
train_set = data[train_id,]
test_set = data[-train_id,]
model_svm = svm(star ~ fork+watch+commits+branches, data, cost = 1000, gamma = 0.0001)
# summary(model_svm)
train_predict_svm = predict(model_svm, train_set)
test_predict_svm = predict(model_svm, test_set)
output$test = train_predict_svm
par(mfrow = c(2, 2))  ##四个变量一起看
visreg(model_svm)
})
DT::datatable(data)
#ggplot(data, aes(y=star,x=name)) + geom_col()
renderPlot(
{
ggplot(data, aes(x=star,y=star)) + geom_point()
}
)
set.seed(7777777)
train_id = sample(nrow(data), size = 0.81*nrow(data))
train_set = data[train_id,]
test_set = data[-train_id,]
#print(paste(nrow(train_set), "train +", nrow(test_set), "test"))
model_lm = lm(star ~ fork+watch+commits+branches, train_set)
#plot(model_lm)
#model_glm <- glm(star ~ fork+watch+commits+branches, train_set)
par(mfrow = c(2, 2))  ##四个变量一起看
visreg(model_lm)
train_predict_lm = predict(model_lm, train_set)
test_predict_lm = predict(model_lm, test_set)
index_train_lm = sqrt(mean((train_set$star - train_predict_lm)^2))
index_test_lm = sqrt(mean((test_set$star - test_predict_lm)^2))
set.seed(7777777)
train_id = sample(nrow(data), size = 0.81*nrow(data))
train_set = data[train_id,]
test_set = data[-train_id,]
#print(paste(nrow(train_set), "train +", nrow(test_set), "test"))
model_lm = lm(star ~ fork+watch+commits+branches, train_set)
#plot(model_lm)
#model_glm <- glm(star ~ fork+watch+commits+branches, train_set)
par(mfrow = c(2, 2))  ##四个变量一起看
visreg(model_lm)
train_predict_lm = predict(model_lm, train_set)
test_predict_lm = predict(model_lm, test_set)
sqrt(mean((train_set$star - train_predict_lm)^2))
sqrt(mean((test_set$star - test_predict_lm)^2))
set.seed(7777777)
train_id = sample(nrow(data), size = 0.81*nrow(data))
train_set = data[train_id,]
test_set = data[-train_id,]
model_rf = randomForest(star ~ fork+watch+commits+branches, train_set)
plot(model_rf)
#par(mfrow = c(2, 2))  ##四个变量一起看
#visreg(model_rf)
train_predict_rf = predict(model_rf, train_set)
test_predict_rf = predict(model_rf, test_set)
sqrt(mean((train_set$star - train_predict_rf)^2))
sqrt(mean((test_set$star - test_predict_rf)^2))
set.seed(7777777)
train_id = sample(nrow(data), size = 0.81*nrow(data))
train_set = data[train_id,]
test_set = data[-train_id,]
model_svm = svm(star ~ fork+watch+commits+branches, data, cost = 1000, gamma = 0.0001)
# summary(model_svm)
train_predict_svm = predict(model_svm, train_set)
test_predict_svm = predict(model_svm, test_set)
sqrt(mean((train_set$star - train_predict_svm)^2))
sqrt(mean((test_set$star - test_predict_svm)^2))
